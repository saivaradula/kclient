{"version":3,"sources":["App.js","serviceWorker.js","reducers/auth.js","reducers/index.js","store.js","index.js","constants/actionTypes.js"],"names":["loading","className","DefaultLayout","React","lazy","PrintPreview","FinalPrint","InvoicePrint","ReturnPrint","ImagePrint","Login","Register","Page404","Page500","App","isLoggedIn","useSelector","state","auth","Suspense","fallback","exact","path","name","render","props","Boolean","window","location","hostname","match","user","JSON","parse","localStorage","getItem","initialState","combineReducers","action","type","payload","actions","LOGIN_SUCCESS","LOGOUT","LOGIN_FAILED","removeItem","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","LOGIN"],"mappings":"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","file":"static/js/main.bc0a4dea.chunk.js","sourcesContent":["import React, { Component, useState } from 'react'\r\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport './scss/style.scss'\r\n\r\nconst loading = (\r\n  <div className=\"pt-3 text-center\">\r\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\r\n  </div>\r\n)\r\n\r\n// Containers\r\nconst DefaultLayout = React.lazy(() => import('./layout/DefaultLayout'))\r\nconst PrintPreview = React.lazy(() => import('./components/product/preview'))\r\nconst FinalPrint = React.lazy(() => import('./components/invoice/finalprint'))\r\nconst InvoicePrint = React.lazy(() => import('./components/invoice/invoiceprint'))\r\nconst ReturnPrint = React.lazy(() => import('./components/returns/invoicePrint'))\r\nconst ImagePrint = React.lazy(() => import('./components/invoice/imageprint'))\r\n\r\n// Pages\r\nconst Login = React.lazy(() => import('./views/pages/login/Login'))\r\nconst Register = React.lazy(() => import('./views/pages/register/Register'))\r\nconst Page404 = React.lazy(() => import('./views/pages/page404/Page404'))\r\nconst Page500 = React.lazy(() => import('./views/pages/page500/Page500'))\r\n\r\nfunction App() {\r\n  const { isLoggedIn } = useSelector(state => state.auth);\r\n\r\n  if (!isLoggedIn) {\r\n    return <HashRouter>\r\n      <React.Suspense fallback={loading}>\r\n        <Login />\r\n      </React.Suspense>\r\n    </HashRouter>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <HashRouter>\r\n        <React.Suspense fallback={loading}>\r\n          <Switch>\r\n            <Route exact path=\"/login\" name=\"Login Page\" render={(props) => <Login {...props} />} />\r\n            <Route\r\n              exact\r\n              path=\"/register\"\r\n              name=\"Register Page\"\r\n              render={(props) => <Register {...props} />}\r\n            />\r\n            <Route exact path=\"/404\" name=\"Page 404\" render={(props) => <Page404 {...props} />} />\r\n            <Route exact path=\"/500\" name=\"Page 500\" render={(props) => <Page500 {...props} />} />\r\n            <Route\r\n              exact\r\n              path=\"/products/print/preview\"\r\n              name=\"Print Preview\"\r\n              render={(props) => <PrintPreview {...props} />}\r\n            />\r\n\r\n            <Route\r\n              exact\r\n              path='/invoice/print/:id'\r\n              name=\"Print Final Invoice \"\r\n              render={(props) => <FinalPrint {...props} />}\r\n            />\r\n\r\n            <Route\r\n              exact\r\n              path='/invoice/received/:id/:type'\r\n              name=\"Print Final Invoice\"\r\n              render={(props) => <ReturnPrint {...props} />}\r\n            />\r\n\r\n            <Route\r\n              exact\r\n              path='/invoice/internalprint/:id'\r\n              name=\"Print Final Invoice \"\r\n              render={(props) => <InvoicePrint {...props} />}\r\n            />\r\n\r\n            <Route\r\n              exact\r\n              path='/invoice/imageprint/:id'\r\n              name=\"Print Final Invoice \"\r\n              render={(props) => <ImagePrint {...props} />}\r\n            />\r\n\r\n            <Route\r\n              exact\r\n              path='/invoice/imageprint/:id/:type'\r\n              name=\"Print Final Invoice \"\r\n              render={(props) => <ImagePrint {...props} />}\r\n            />\r\n\r\n\r\n\r\n            <Route path=\"/\" name=\"Home\" render={(props) => <DefaultLayout {...props} />} />\r\n          </Switch>\r\n        </React.Suspense>\r\n      </HashRouter>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\r\n          )\r\n        })\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.')\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import actions from '../constants/actionTypes'\r\nconst user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\nconst initialState = user\r\n    ? { isLoggedIn: true, user }\r\n    : { isLoggedIn: false, user: null };\r\n\r\nexport default function (state = initialState, action) {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case actions.LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                user: payload.user,\r\n            };\r\n\r\n        case actions.LOGOUT:\r\n        case actions.LOGIN_FAILED:\r\n            localStorage.removeItem(\"user\")\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                user: null,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport auth from \"./auth\";\r\n\r\nexport default combineReducers({\r\n    auth,\r\n});","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport rootReducer from \"./reducers\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst middleware = [thunk];\r\n\r\nconst initialState = {\r\n  sidebarShow: true,\r\n  rootReducer\r\n}\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nconst changeState = (state = initialState, { type, ...rest }) => {\r\n  switch (type) {\r\n    case 'set':\r\n      return { ...state, ...rest }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// const store = createStore(rootReducer, applyMiddleware(...middleware))\r\nexport default store\r\n","import 'react-app-polyfill/stable'\r\nimport 'core-js'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { Provider } from 'react-redux'\r\nimport store from './store'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","export default {\r\n    LOGIN: 'LOGIN',\r\n    LOGOUT: 'LOGOUT',\r\n    LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n    LOGIN_FAILED: 'LOGIN_FAILED'\r\n}\r\n\r\n// export default actionTypes\r\n"],"sourceRoot":""}