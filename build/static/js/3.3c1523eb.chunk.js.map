{"version":3,"sources":["../node_modules/dom-helpers/esm/scrollbarSize.js","../node_modules/dom-helpers/esm/activeElement.js","../node_modules/@restart/ui/esm/ModalManager.js","../node_modules/@restart/ui/esm/DataKey.js","../node_modules/@restart/ui/esm/getScrollbarWidth.js","../node_modules/@restart/ui/esm/Modal.js","../node_modules/dom-helpers/esm/querySelectorAll.js","../node_modules/dom-helpers/esm/removeClass.js","../node_modules/react-bootstrap/esm/BootstrapModalManager.js","../node_modules/dom-helpers/esm/addClass.js","../node_modules/react-bootstrap/esm/ModalBody.js","../node_modules/react-bootstrap/esm/ModalContext.js","../node_modules/react-bootstrap/esm/ModalDialog.js","../node_modules/react-bootstrap/esm/ModalFooter.js","../node_modules/react-bootstrap/esm/AbstractModalHeader.js","../node_modules/react-bootstrap/esm/ModalHeader.js","../node_modules/react-bootstrap/esm/ModalTitle.js","../node_modules/react-bootstrap/esm/Modal.js","../node_modules/@restart/hooks/esm/usePrevious.js","../node_modules/react-bootstrap/esm/CloseButton.js","../node_modules/react-bootstrap/esm/divWithClassName.js"],"names":["size","scrollbarSize","recalc","canUseDOM","scrollDiv","document","createElement","style","position","top","width","height","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","activeElement","doc","ownerDocument","active","nodeName","e","OPEN_DATA_ATTRIBUTE","property","ModalManager","constructor","handleContainerOverflow","isRTL","this","modals","getScrollbarWidth","window","defaultView","Math","abs","innerWidth","documentElement","getBodyScrollbarWidth","getElement","setModalAttributes","_modal","removeModalAttributes","setContainerStyle","containerState","paddingProp","container","scrollBarWidth","parseInt","css","setAttribute","reset","forEach","m","remove","removeContainerStyle","removeAttribute","Object","assign","add","modal","modalIdx","indexOf","length","push","state","splice","isTopModal","_excluded","manager","useModalManager","provided","useWindow","modalManager","getManager","useRef","dialog","backdrop","current","setDialogRef","useCallback","ref","setBackdropRef","Modal","forwardRef","_ref","show","role","className","children","keyboard","onBackdropClick","onEscapeKeyDown","transition","backdropTransition","autoFocus","enforceFocus","restoreFocus","restoreFocusOptions","renderDialog","renderBackdrop","props","_jsx","providedManager","containerRef","onShow","onHide","onExit","onExited","onExiting","onEnter","onEntering","onEntered","rest","source","excluded","key","i","target","sourceKeys","keys","_objectWithoutPropertiesLoose","useWaitForDOMRef","isMounted","useMounted","prevShow","usePrevious","exited","setExited","useState","lastFocusRef","useImperativeHandle","handleShow","useEventCallback","removeKeydownListenerRef","listen","handleDocumentKeyDown","removeFocusListenerRef","setTimeout","handleEnforceFocus","currentActiveElement","contains","focus","handleHide","_lastFocusRef$current","useEffect","useWillUnmount","handleBackdropClick","currentTarget","keyCode","defaultPrevented","handleHidden","Transition","dialogProps","undefined","tabIndex","React","appear","unmountOnExit","in","backdropElement","BackdropTransition","onClick","_Fragment","ReactDOM","createPortal","_jsxs","displayName","Manager","toArray","Function","prototype","bind","call","slice","qsa","element","selector","querySelectorAll","replaceClassName","origClass","classToRemove","replace","RegExp","Selector","BootstrapModalManager","adjustAndStore","prop","adjust","actual","dataset","parseFloat","restore","value","super","classList","hasClass","baseVal","marginProp","el","sharedManager","createWithBsPrefix","ModalContext","ModalDialog","bsPrefix","contentClassName","centered","fullscreen","scrollable","useBootstrapPrefix","dialogClass","fullScreenClass","classNames","AbstractModalHeader","closeLabel","closeVariant","closeButton","context","useContext","handleClick","CloseButton","variant","defaultProps","ModalHeader","DivStyledAsH4","divWithClassName","Component","animation","dialogAs","DialogTransition","Fade","timeout","dialogClassName","Dialog","ariaLabelledby","backdropClassName","propsManager","modalStyle","setStyle","animateStaticModal","setAnimateStaticModal","waitingForMouseUpRef","ignoreBackdropClickRef","removeStaticModalAnimationRef","setModalRef","useCallbackRef","mergedRef","useMergedRefs","useIsRTL","modalContext","useMemo","getModalManager","options","updateDialogStyle","node","containerIsOverflowing","modalIsOverflowing","scrollHeight","clientHeight","paddingRight","getScrollbarSize","paddingLeft","handleWindowResize","removeEventListener","handleDialogMouseDown","handleMouseUp","handleStaticModalAnimation","transitionEnd","handleStaticBackdropClick","backdropProps","baseModalStyle","display","Provider","BaseModal","preventDefault","isAppearing","addEventListener","onMouseUp","onMouseDown","Body","ModalBody","Header","Title","ModalTitle","Footer","ModalFooter","TRANSITION_DURATION","BACKDROP_TRANSITION_DURATION","propTypes","PropTypes","string","func","oneOf","type","p"],"mappings":"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","file":"static/js/3.3c1523eb.chunk.js","sourcesContent":["import canUseDOM from './canUseDOM';\nvar size;\nexport default function scrollbarSize(recalc) {\n  if (!size && size !== 0 || recalc) {\n    if (canUseDOM) {\n      var scrollDiv = document.createElement('div');\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.top = '-9999px';\n      scrollDiv.style.width = '50px';\n      scrollDiv.style.height = '50px';\n      scrollDiv.style.overflow = 'scroll';\n      document.body.appendChild(scrollDiv);\n      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n    }\n  }\n\n  return size;\n}","import ownerDocument from './ownerDocument';\n/**\n * Returns the actively focused element safely.\n *\n * @param doc the document to check\n */\n\nexport default function activeElement(doc) {\n  if (doc === void 0) {\n    doc = ownerDocument();\n  }\n\n  // Support: IE 9 only\n  // IE9 throws an \"Unspecified error\" accessing document.activeElement from an <iframe>\n  try {\n    var active = doc.activeElement; // IE11 returns a seemingly empty object in some cases when accessing\n    // document.activeElement from an <iframe>\n\n    if (!active || !active.nodeName) return null;\n    return active;\n  } catch (e) {\n    /* ie throws if no active element */\n    return doc.body;\n  }\n}","import css from 'dom-helpers/css';\nimport { dataAttr } from './DataKey';\nimport getBodyScrollbarWidth from './getScrollbarWidth';\nexport const OPEN_DATA_ATTRIBUTE = dataAttr('modal-open');\n/**\n * Manages a stack of Modals as well as ensuring\n * body scrolling is is disabled and padding accounted for\n */\n\nclass ModalManager {\n  constructor({\n    ownerDocument,\n    handleContainerOverflow = true,\n    isRTL = false\n  } = {}) {\n    this.handleContainerOverflow = handleContainerOverflow;\n    this.isRTL = isRTL;\n    this.modals = [];\n    this.ownerDocument = ownerDocument;\n  }\n\n  getScrollbarWidth() {\n    return getBodyScrollbarWidth(this.ownerDocument);\n  }\n\n  getElement() {\n    return (this.ownerDocument || document).body;\n  }\n\n  setModalAttributes(_modal) {// For overriding\n  }\n\n  removeModalAttributes(_modal) {// For overriding\n  }\n\n  setContainerStyle(containerState) {\n    const style = {\n      overflow: 'hidden'\n    }; // we are only interested in the actual `style` here\n    // because we will override it\n\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const container = this.getElement();\n    containerState.style = {\n      overflow: container.style.overflow,\n      [paddingProp]: container.style[paddingProp]\n    };\n\n    if (containerState.scrollBarWidth) {\n      // use computed style, here to get the real padding\n      // to add our scrollbar width\n      style[paddingProp] = `${parseInt(css(container, paddingProp) || '0', 10) + containerState.scrollBarWidth}px`;\n    }\n\n    container.setAttribute(OPEN_DATA_ATTRIBUTE, '');\n    css(container, style);\n  }\n\n  reset() {\n    [...this.modals].forEach(m => this.remove(m));\n  }\n\n  removeContainerStyle(containerState) {\n    const container = this.getElement();\n    container.removeAttribute(OPEN_DATA_ATTRIBUTE);\n    Object.assign(container.style, containerState.style);\n  }\n\n  add(modal) {\n    let modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx !== -1) {\n      return modalIdx;\n    }\n\n    modalIdx = this.modals.length;\n    this.modals.push(modal);\n    this.setModalAttributes(modal);\n\n    if (modalIdx !== 0) {\n      return modalIdx;\n    }\n\n    this.state = {\n      scrollBarWidth: this.getScrollbarWidth(),\n      style: {}\n    };\n\n    if (this.handleContainerOverflow) {\n      this.setContainerStyle(this.state);\n    }\n\n    return modalIdx;\n  }\n\n  remove(modal) {\n    const modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx === -1) {\n      return;\n    }\n\n    this.modals.splice(modalIdx, 1); // if that was the last modal in a container,\n    // clean up the container\n\n    if (!this.modals.length && this.handleContainerOverflow) {\n      this.removeContainerStyle(this.state);\n    }\n\n    this.removeModalAttributes(modal);\n  }\n\n  isTopModal(modal) {\n    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n  }\n\n}\n\nexport default ModalManager;","export const ATTRIBUTE_PREFIX = `data-rr-ui-`;\nexport const PROPERTY_PREFIX = `rrUi`;\nexport function dataAttr(property) {\n  return `${ATTRIBUTE_PREFIX}${property}`;\n}\nexport function dataProp(property) {\n  return `${PROPERTY_PREFIX}${property}`;\n}","/**\n * Get the width of the vertical window scrollbar if it's visible\n */\nexport default function getBodyScrollbarWidth(ownerDocument = document) {\n  const window = ownerDocument.defaultView;\n  return Math.abs(window.innerWidth - ownerDocument.documentElement.clientWidth);\n}","const _excluded = [\"show\", \"role\", \"className\", \"style\", \"children\", \"backdrop\", \"keyboard\", \"onBackdropClick\", \"onEscapeKeyDown\", \"transition\", \"backdropTransition\", \"autoFocus\", \"enforceFocus\", \"restoreFocus\", \"restoreFocusOptions\", \"renderDialog\", \"renderBackdrop\", \"manager\", \"container\", \"onShow\", \"onHide\", \"onExit\", \"onExited\", \"onExiting\", \"onEnter\", \"onEntering\", \"onEntered\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable @typescript-eslint/no-use-before-define, react/prop-types */\nimport activeElement from 'dom-helpers/activeElement';\nimport contains from 'dom-helpers/contains';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nimport listen from 'dom-helpers/listen';\nimport { useState, useRef, useCallback, useImperativeHandle, forwardRef, useEffect } from 'react';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport useMounted from '@restart/hooks/useMounted';\nimport useWillUnmount from '@restart/hooks/useWillUnmount';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport ModalManager from './ModalManager';\nimport useWaitForDOMRef from './useWaitForDOMRef';\nimport useWindow from './useWindow';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nlet manager;\n\nfunction getManager(window) {\n  if (!manager) manager = new ModalManager({\n    ownerDocument: window == null ? void 0 : window.document\n  });\n  return manager;\n}\n\nfunction useModalManager(provided) {\n  const window = useWindow();\n  const modalManager = provided || getManager(window);\n  const modal = useRef({\n    dialog: null,\n    backdrop: null\n  });\n  return Object.assign(modal.current, {\n    add: () => modalManager.add(modal.current),\n    remove: () => modalManager.remove(modal.current),\n    isTopModal: () => modalManager.isTopModal(modal.current),\n    setDialogRef: useCallback(ref => {\n      modal.current.dialog = ref;\n    }, []),\n    setBackdropRef: useCallback(ref => {\n      modal.current.backdrop = ref;\n    }, [])\n  });\n}\n\nconst Modal = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    show = false,\n    role = 'dialog',\n    className,\n    style,\n    children,\n    backdrop = true,\n    keyboard = true,\n    onBackdropClick,\n    onEscapeKeyDown,\n    transition,\n    backdropTransition,\n    autoFocus = true,\n    enforceFocus = true,\n    restoreFocus = true,\n    restoreFocusOptions,\n    renderDialog,\n    renderBackdrop = props => /*#__PURE__*/_jsx(\"div\", Object.assign({}, props)),\n    manager: providedManager,\n    container: containerRef,\n    onShow,\n    onHide = () => {},\n    onExit,\n    onExited,\n    onExiting,\n    onEnter,\n    onEntering,\n    onEntered\n  } = _ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const container = useWaitForDOMRef(containerRef);\n  const modal = useModalManager(providedManager);\n  const isMounted = useMounted();\n  const prevShow = usePrevious(show);\n  const [exited, setExited] = useState(!show);\n  const lastFocusRef = useRef(null);\n  useImperativeHandle(ref, () => modal, [modal]);\n\n  if (canUseDOM && !prevShow && show) {\n    lastFocusRef.current = activeElement();\n  }\n\n  if (!transition && !show && !exited) {\n    setExited(true);\n  } else if (show && exited) {\n    setExited(false);\n  }\n\n  const handleShow = useEventCallback(() => {\n    modal.add();\n    removeKeydownListenerRef.current = listen(document, 'keydown', handleDocumentKeyDown);\n    removeFocusListenerRef.current = listen(document, 'focus', // the timeout is necessary b/c this will run before the new modal is mounted\n    // and so steals focus from it\n    () => setTimeout(handleEnforceFocus), true);\n\n    if (onShow) {\n      onShow();\n    } // autofocus after onShow to not trigger a focus event for previous\n    // modals before this one is shown.\n\n\n    if (autoFocus) {\n      const currentActiveElement = activeElement(document);\n\n      if (modal.dialog && currentActiveElement && !contains(modal.dialog, currentActiveElement)) {\n        lastFocusRef.current = currentActiveElement;\n        modal.dialog.focus();\n      }\n    }\n  });\n  const handleHide = useEventCallback(() => {\n    modal.remove();\n    removeKeydownListenerRef.current == null ? void 0 : removeKeydownListenerRef.current();\n    removeFocusListenerRef.current == null ? void 0 : removeFocusListenerRef.current();\n\n    if (restoreFocus) {\n      var _lastFocusRef$current;\n\n      // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)\n      (_lastFocusRef$current = lastFocusRef.current) == null ? void 0 : _lastFocusRef$current.focus == null ? void 0 : _lastFocusRef$current.focus(restoreFocusOptions);\n      lastFocusRef.current = null;\n    }\n  }); // TODO: try and combine these effects: https://github.com/react-bootstrap/react-overlays/pull/794#discussion_r409954120\n  // Show logic when:\n  //  - show is `true` _and_ `container` has resolved\n\n  useEffect(() => {\n    if (!show || !container) return;\n    handleShow();\n  }, [show, container,\n  /* should never change: */\n  handleShow]); // Hide cleanup logic when:\n  //  - `exited` switches to true\n  //  - component unmounts;\n\n  useEffect(() => {\n    if (!exited) return;\n    handleHide();\n  }, [exited, handleHide]);\n  useWillUnmount(() => {\n    handleHide();\n  }); // --------------------------------\n\n  const handleEnforceFocus = useEventCallback(() => {\n    if (!enforceFocus || !isMounted() || !modal.isTopModal()) {\n      return;\n    }\n\n    const currentActiveElement = activeElement();\n\n    if (modal.dialog && currentActiveElement && !contains(modal.dialog, currentActiveElement)) {\n      modal.dialog.focus();\n    }\n  });\n  const handleBackdropClick = useEventCallback(e => {\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n\n    onBackdropClick == null ? void 0 : onBackdropClick(e);\n\n    if (backdrop === true) {\n      onHide();\n    }\n  });\n  const handleDocumentKeyDown = useEventCallback(e => {\n    if (keyboard && e.keyCode === 27 && modal.isTopModal()) {\n      onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(e);\n\n      if (!e.defaultPrevented) {\n        onHide();\n      }\n    }\n  });\n  const removeFocusListenerRef = useRef();\n  const removeKeydownListenerRef = useRef();\n\n  const handleHidden = (...args) => {\n    setExited(true);\n    onExited == null ? void 0 : onExited(...args);\n  };\n\n  const Transition = transition;\n\n  if (!container || !(show || Transition && !exited)) {\n    return null;\n  }\n\n  const dialogProps = Object.assign({\n    role,\n    ref: modal.setDialogRef,\n    // apparently only works on the dialog role element\n    'aria-modal': role === 'dialog' ? true : undefined\n  }, rest, {\n    style,\n    className,\n    tabIndex: -1\n  });\n  let dialog = renderDialog ? renderDialog(dialogProps) : /*#__PURE__*/_jsx(\"div\", Object.assign({}, dialogProps, {\n    children: /*#__PURE__*/React.cloneElement(children, {\n      role: 'document'\n    })\n  }));\n\n  if (Transition) {\n    dialog = /*#__PURE__*/_jsx(Transition, {\n      appear: true,\n      unmountOnExit: true,\n      in: !!show,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: handleHidden,\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      children: dialog\n    });\n  }\n\n  let backdropElement = null;\n\n  if (backdrop) {\n    const BackdropTransition = backdropTransition;\n    backdropElement = renderBackdrop({\n      ref: modal.setBackdropRef,\n      onClick: handleBackdropClick\n    });\n\n    if (BackdropTransition) {\n      backdropElement = /*#__PURE__*/_jsx(BackdropTransition, {\n        appear: true,\n        in: !!show,\n        children: backdropElement\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxs(_Fragment, {\n      children: [backdropElement, dialog]\n    }), container)\n  });\n});\nModal.displayName = 'Modal';\nexport default Object.assign(Modal, {\n  Manager: ModalManager\n});","var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);\n/**\n * Runs `querySelectorAll` on a given element.\n * \n * @param element the element\n * @param selector the selector\n */\n\nexport default function qsa(element, selector) {\n  return toArray(element.querySelectorAll(selector));\n}","function replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n}\n/**\n * Removes a CSS class from a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\n\nexport default function removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === 'string') {\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));\n  }\n}","import addClass from 'dom-helpers/addClass';\nimport css from 'dom-helpers/css';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport removeClass from 'dom-helpers/removeClass';\nimport ModalManager from '@restart/ui/ModalManager';\nconst Selector = {\n  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n  STICKY_CONTENT: '.sticky-top',\n  NAVBAR_TOGGLER: '.navbar-toggler'\n};\n\nclass BootstrapModalManager extends ModalManager {\n  adjustAndStore(prop, element, adjust) {\n    const actual = element.style[prop]; // TODO: DOMStringMap and CSSStyleDeclaration aren't strictly compatible\n    // @ts-ignore\n\n    element.dataset[prop] = actual;\n    css(element, {\n      [prop]: `${parseFloat(css(element, prop)) + adjust}px`\n    });\n  }\n\n  restore(prop, element) {\n    const value = element.dataset[prop];\n\n    if (value !== undefined) {\n      delete element.dataset[prop];\n      css(element, {\n        [prop]: value\n      });\n    }\n  }\n\n  setContainerStyle(containerState) {\n    super.setContainerStyle(containerState);\n    const container = this.getElement();\n    addClass(container, 'modal-open');\n    if (!containerState.scrollBarWidth) return;\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.adjustAndStore(paddingProp, el, containerState.scrollBarWidth));\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.adjustAndStore(marginProp, el, -containerState.scrollBarWidth));\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.adjustAndStore(marginProp, el, containerState.scrollBarWidth));\n  }\n\n  removeContainerStyle(containerState) {\n    super.removeContainerStyle(containerState);\n    const container = this.getElement();\n    removeClass(container, 'modal-open');\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const marginProp = this.isRTL ? 'marginLeft' : 'marginRight';\n    qsa(container, Selector.FIXED_CONTENT).forEach(el => this.restore(paddingProp, el));\n    qsa(container, Selector.STICKY_CONTENT).forEach(el => this.restore(marginProp, el));\n    qsa(container, Selector.NAVBAR_TOGGLER).forEach(el => this.restore(marginProp, el));\n  }\n\n}\n\nlet sharedManager;\nexport function getSharedManager(options) {\n  if (!sharedManager) sharedManager = new BootstrapModalManager(options);\n  return sharedManager;\n}\nexport default BootstrapModalManager;","import hasClass from './hasClass';\n/**\n * Adds a CSS class to a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\nexport default function addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + \" \" + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + \" \" + className);\n}","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('modal-body');","import * as React from 'react';\nconst ModalContext = /*#__PURE__*/React.createContext({\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onHide() {}\n\n});\nexport default ModalContext;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ModalDialog = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  contentClassName,\n  centered,\n  size,\n  fullscreen,\n  children,\n  scrollable,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'modal');\n  const dialogClass = `${bsPrefix}-dialog`;\n  const fullScreenClass = typeof fullscreen === 'string' ? `${bsPrefix}-fullscreen-${fullscreen}` : `${bsPrefix}-fullscreen`;\n  return /*#__PURE__*/_jsx(\"div\", { ...props,\n    ref: ref,\n    className: classNames(dialogClass, className, size && `${bsPrefix}-${size}`, centered && `${dialogClass}-centered`, scrollable && `${dialogClass}-scrollable`, fullscreen && fullScreenClass),\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: classNames(`${bsPrefix}-content`, contentClassName),\n      children: children\n    })\n  });\n});\nModalDialog.displayName = 'ModalDialog';\nexport default ModalDialog;","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('modal-footer');","import * as React from 'react';\nimport { useContext } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport CloseButton from './CloseButton';\nimport ModalContext from './ModalContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultProps = {\n  closeLabel: 'Close',\n  closeButton: false\n};\nconst AbstractModalHeader = /*#__PURE__*/React.forwardRef(({\n  closeLabel,\n  closeVariant,\n  closeButton,\n  onHide,\n  children,\n  ...props\n}, ref) => {\n  const context = useContext(ModalContext);\n  const handleClick = useEventCallback(() => {\n    context == null ? void 0 : context.onHide();\n    onHide == null ? void 0 : onHide();\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    ref: ref,\n    ...props,\n    children: [children, closeButton && /*#__PURE__*/_jsx(CloseButton, {\n      \"aria-label\": closeLabel,\n      variant: closeVariant,\n      onClick: handleClick\n    })]\n  });\n});\nAbstractModalHeader.defaultProps = defaultProps;\nexport default AbstractModalHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AbstractModalHeader from './AbstractModalHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  closeLabel: 'Close',\n  closeButton: false\n};\nconst ModalHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'modal-header');\n  return /*#__PURE__*/_jsx(AbstractModalHeader, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsPrefix)\n  });\n});\nModalHeader.displayName = 'ModalHeader';\nModalHeader.defaultProps = defaultProps;\nexport default ModalHeader;","import createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nconst DivStyledAsH4 = divWithClassName('h4');\nexport default createWithBsPrefix('modal-title', {\n  Component: DivStyledAsH4\n});","import classNames from 'classnames';\nimport addEventListener from 'dom-helpers/addEventListener';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport removeEventListener from 'dom-helpers/removeEventListener';\nimport getScrollbarSize from 'dom-helpers/scrollbarSize';\nimport useCallbackRef from '@restart/hooks/useCallbackRef';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport useWillUnmount from '@restart/hooks/useWillUnmount';\nimport transitionEnd from 'dom-helpers/transitionEnd';\nimport * as React from 'react';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport BaseModal from '@restart/ui/Modal';\nimport { getSharedManager } from './BootstrapModalManager';\nimport Fade from './Fade';\nimport ModalBody from './ModalBody';\nimport ModalContext from './ModalContext';\nimport ModalDialog from './ModalDialog';\nimport ModalFooter from './ModalFooter';\nimport ModalHeader from './ModalHeader';\nimport ModalTitle from './ModalTitle';\nimport { useBootstrapPrefix, useIsRTL } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  show: false,\n  backdrop: true,\n  keyboard: true,\n  autoFocus: true,\n  enforceFocus: true,\n  restoreFocus: true,\n  animation: true,\n  dialogAs: ModalDialog\n};\n/* eslint-disable no-use-before-define, react/no-multi-comp */\n\nfunction DialogTransition(props) {\n  return /*#__PURE__*/_jsx(Fade, { ...props,\n    timeout: null\n  });\n}\n\nfunction BackdropTransition(props) {\n  return /*#__PURE__*/_jsx(Fade, { ...props,\n    timeout: null\n  });\n}\n/* eslint-enable no-use-before-define */\n\n\nconst Modal = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  style,\n  dialogClassName,\n  contentClassName,\n  children,\n  dialogAs: Dialog,\n  'aria-labelledby': ariaLabelledby,\n\n  /* BaseModal props */\n  show,\n  animation,\n  backdrop,\n  keyboard,\n  onEscapeKeyDown,\n  onShow,\n  onHide,\n  container,\n  autoFocus,\n  enforceFocus,\n  restoreFocus,\n  restoreFocusOptions,\n  onEntered,\n  onExit,\n  onExiting,\n  onEnter,\n  onEntering,\n  onExited,\n  backdropClassName,\n  manager: propsManager,\n  ...props\n}, ref) => {\n  const [modalStyle, setStyle] = useState({});\n  const [animateStaticModal, setAnimateStaticModal] = useState(false);\n  const waitingForMouseUpRef = useRef(false);\n  const ignoreBackdropClickRef = useRef(false);\n  const removeStaticModalAnimationRef = useRef(null);\n  const [modal, setModalRef] = useCallbackRef();\n  const mergedRef = useMergedRefs(ref, setModalRef);\n  const handleHide = useEventCallback(onHide);\n  const isRTL = useIsRTL();\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'modal');\n  const modalContext = useMemo(() => ({\n    onHide: handleHide\n  }), [handleHide]);\n\n  function getModalManager() {\n    if (propsManager) return propsManager;\n    return getSharedManager({\n      isRTL\n    });\n  }\n\n  function updateDialogStyle(node) {\n    if (!canUseDOM) return;\n    const containerIsOverflowing = getModalManager().getScrollbarWidth() > 0;\n    const modalIsOverflowing = node.scrollHeight > ownerDocument(node).documentElement.clientHeight;\n    setStyle({\n      paddingRight: containerIsOverflowing && !modalIsOverflowing ? getScrollbarSize() : undefined,\n      paddingLeft: !containerIsOverflowing && modalIsOverflowing ? getScrollbarSize() : undefined\n    });\n  }\n\n  const handleWindowResize = useEventCallback(() => {\n    if (modal) {\n      updateDialogStyle(modal.dialog);\n    }\n  });\n  useWillUnmount(() => {\n    removeEventListener(window, 'resize', handleWindowResize);\n    removeStaticModalAnimationRef.current == null ? void 0 : removeStaticModalAnimationRef.current();\n  }); // We prevent the modal from closing during a drag by detecting where the\n  // the click originates from. If it starts in the modal and then ends outside\n  // don't close.\n\n  const handleDialogMouseDown = () => {\n    waitingForMouseUpRef.current = true;\n  };\n\n  const handleMouseUp = e => {\n    if (waitingForMouseUpRef.current && modal && e.target === modal.dialog) {\n      ignoreBackdropClickRef.current = true;\n    }\n\n    waitingForMouseUpRef.current = false;\n  };\n\n  const handleStaticModalAnimation = () => {\n    setAnimateStaticModal(true);\n    removeStaticModalAnimationRef.current = transitionEnd(modal.dialog, () => {\n      setAnimateStaticModal(false);\n    });\n  };\n\n  const handleStaticBackdropClick = e => {\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n\n    handleStaticModalAnimation();\n  };\n\n  const handleClick = e => {\n    if (backdrop === 'static') {\n      handleStaticBackdropClick(e);\n      return;\n    }\n\n    if (ignoreBackdropClickRef.current || e.target !== e.currentTarget) {\n      ignoreBackdropClickRef.current = false;\n      return;\n    }\n\n    onHide == null ? void 0 : onHide();\n  };\n\n  const handleEscapeKeyDown = e => {\n    if (!keyboard && backdrop === 'static') {\n      // Call preventDefault to stop modal from closing in restart ui,\n      // then play our animation.\n      e.preventDefault();\n      handleStaticModalAnimation();\n    } else if (keyboard && onEscapeKeyDown) {\n      onEscapeKeyDown(e);\n    }\n  };\n\n  const handleEnter = (node, isAppearing) => {\n    if (node) {\n      node.style.display = 'block';\n      updateDialogStyle(node);\n    }\n\n    onEnter == null ? void 0 : onEnter(node, isAppearing);\n  };\n\n  const handleExit = node => {\n    removeStaticModalAnimationRef.current == null ? void 0 : removeStaticModalAnimationRef.current();\n    onExit == null ? void 0 : onExit(node);\n  };\n\n  const handleEntering = (node, isAppearing) => {\n    onEntering == null ? void 0 : onEntering(node, isAppearing); // FIXME: This should work even when animation is disabled.\n\n    addEventListener(window, 'resize', handleWindowResize);\n  };\n\n  const handleExited = node => {\n    if (node) node.style.display = ''; // RHL removes it sometimes\n\n    onExited == null ? void 0 : onExited(node); // FIXME: This should work even when animation is disabled.\n\n    removeEventListener(window, 'resize', handleWindowResize);\n  };\n\n  const renderBackdrop = useCallback(backdropProps => /*#__PURE__*/_jsx(\"div\", { ...backdropProps,\n    className: classNames(`${bsPrefix}-backdrop`, backdropClassName, !animation && 'show')\n  }), [animation, backdropClassName, bsPrefix]);\n  const baseModalStyle = { ...style,\n    ...modalStyle\n  }; // Sets `display` always block when `animation` is false\n\n  if (!animation) {\n    baseModalStyle.display = 'block';\n  }\n\n  const renderDialog = dialogProps => /*#__PURE__*/_jsx(\"div\", {\n    role: \"dialog\",\n    ...dialogProps,\n    style: baseModalStyle,\n    className: classNames(className, bsPrefix, animateStaticModal && `${bsPrefix}-static`),\n    onClick: backdrop ? handleClick : undefined,\n    onMouseUp: handleMouseUp,\n    \"aria-labelledby\": ariaLabelledby,\n    children: /*#__PURE__*/_jsx(Dialog, { ...props,\n      onMouseDown: handleDialogMouseDown,\n      className: dialogClassName,\n      contentClassName: contentClassName,\n      children: children\n    })\n  });\n\n  return /*#__PURE__*/_jsx(ModalContext.Provider, {\n    value: modalContext,\n    children: /*#__PURE__*/_jsx(BaseModal, {\n      show: show,\n      ref: mergedRef,\n      backdrop: backdrop,\n      container: container,\n      keyboard: true // Always set true - see handleEscapeKeyDown\n      ,\n      autoFocus: autoFocus,\n      enforceFocus: enforceFocus,\n      restoreFocus: restoreFocus,\n      restoreFocusOptions: restoreFocusOptions,\n      onEscapeKeyDown: handleEscapeKeyDown,\n      onShow: onShow,\n      onHide: onHide,\n      onEnter: handleEnter,\n      onEntering: handleEntering,\n      onEntered: onEntered,\n      onExit: handleExit,\n      onExiting: onExiting,\n      onExited: handleExited,\n      manager: getModalManager(),\n      transition: animation ? DialogTransition : undefined,\n      backdropTransition: animation ? BackdropTransition : undefined,\n      renderBackdrop: renderBackdrop,\n      renderDialog: renderDialog\n    })\n  });\n});\nModal.displayName = 'Modal';\nModal.defaultProps = defaultProps;\nexport default Object.assign(Modal, {\n  Body: ModalBody,\n  Header: ModalHeader,\n  Title: ModalTitle,\n  Footer: ModalFooter,\n  Dialog: ModalDialog,\n  TRANSITION_DURATION: 300,\n  BACKDROP_TRANSITION_DURATION: 150\n});","import { useEffect, useRef } from 'react';\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\n\nexport default function usePrevious(value) {\n  var ref = useRef(null);\n  useEffect(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}","import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst propTypes = {\n  'aria-label': PropTypes.string,\n  onClick: PropTypes.func,\n\n  /**\n   * Render different color variant for the button.\n   *\n   * Omitting this will render the default dark color.\n   */\n  variant: PropTypes.oneOf(['white'])\n};\nconst defaultProps = {\n  'aria-label': 'Close'\n};\nconst CloseButton = /*#__PURE__*/React.forwardRef(({\n  className,\n  variant,\n  ...props\n}, ref) => /*#__PURE__*/_jsx(\"button\", {\n  ref: ref,\n  type: \"button\",\n  className: classNames('btn-close', variant && `btn-close-${variant}`, className),\n  ...props\n}));\nCloseButton.displayName = 'CloseButton';\nCloseButton.propTypes = propTypes;\nCloseButton.defaultProps = defaultProps;\nexport default CloseButton;","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));"],"sourceRoot":""}