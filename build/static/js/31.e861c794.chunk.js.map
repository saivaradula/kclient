{"version":3,"sources":["components/returns/searchItems.js","components/returns/returnInvoice.js"],"names":["changeCode","async","invoice","i","e","formValues","setFormValues","details","id","pid","results","axios","get","process","data","getProductDetails","target","value","newFormValues","name","quantity","code","error","rquantity","damaged_cost","damaged_type","isDamaged","isRecieved","prev","displayForm","element","index","returnInvoice","className","autoComplete","type","readonly","onChange","placeholder","readOnly","required","event","updateRvalue","min","max","checked","console","log","isDamagedFun","updateDamageType","updateDamageCost","onClick","recieveProduct","preventDefault","post","invoice_id","receiveProducts","loadDataTable","history","useHistory","xs","method","onSubmit","push","map","displayReadOnlyForm","loadOptions","invoices","displaySelectedInvoice","length","to_name","searchInvoices","setSearchString","getInvoices","require","config","ReturnInvoice","props","searchString","useState","ss","setSS","setInvoices","setReturnInvoice","stopPropagation","prevState","filter","undefined"],"mappings":"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","file":"static/js/31.e861c794.chunk.js","sourcesContent":["import { CCard, CCardBody, CCardHeader, CCardFooter, CCol, CFormInput, CRow } from '@coreui/react'\r\nimport axios from 'axios'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n\r\nconst getProductDetails = async (id, pid) => {\r\n    const results = await axios.get(`${process.env.REACT_APP_API_URL}/invoice/return/${id}/items/${pid}`)\r\n    return results.data[0] ? results.data[0] : 0;\r\n}\r\n\r\nconst changeCode = async (invoice, i, e, formValues, setFormValues) => {\r\n\r\n    const details = await getProductDetails(invoice, e.target.value);\r\n    let newFormValues = [...formValues];\r\n\r\n    if (details) {\r\n        newFormValues[i]['code'] = e.target.value\r\n        newFormValues[i]['error'] = ''\r\n        newFormValues[i]['rquantity'] = 0\r\n        newFormValues[i]['name'] = details.name\r\n        newFormValues[i]['quantity'] = details.quantity\r\n        newFormValues[i + 1] = {\r\n            code: '',\r\n            name: '',\r\n            error: '',\r\n            quantity: 0,\r\n            rquantity: 0,\r\n            damaged_cost: 0,\r\n            damaged_type: '',\r\n            isDamaged: false,\r\n            isRecieved: false\r\n        }\r\n    } else {\r\n        newFormValues[i]['code'] = e.target.value\r\n        newFormValues[i]['error'] = \"Invalid Code.\"\r\n    }\r\n    setFormValues(prev => [...newFormValues])\r\n}\r\nconst updateRvalue = (i, event, formValues, setFormValues) => {\r\n    let newFormValues = [...formValues];\r\n    newFormValues[i].rquantity = event.target.value;\r\n    setFormValues(prev => [...newFormValues])\r\n}\r\n\r\nconst updateDamageType = (i, event, formValues, setFormValues) => {\r\n    let newFormValues = [...formValues];\r\n    newFormValues[i].damaged_type = event.target.value;\r\n    setFormValues(prev => [...newFormValues])\r\n}\r\n\r\nconst updateDamageCost = (i, event, formValues, setFormValues) => {\r\n    let newFormValues = [...formValues];\r\n    newFormValues[i].damaged_cost = event.target.value;\r\n    setFormValues(prev => [...newFormValues])\r\n}\r\n\r\nconst isDamagedFun = (i, event, formValues, setFormValues) => {\r\n    let newFormValues = [...formValues];\r\n    newFormValues[i].isDamaged = event.target.checked;\r\n    newFormValues[i].damaged_cost = event.target.checked ? newFormValues[i].damaged_cost : 0\r\n    setFormValues(prev => [...newFormValues])\r\n    console.log(formValues)\r\n}\r\n\r\nconst receiveProducts = async (e, i, formValues, recieveProduct, returnInvoice, setFormValues) => {\r\n    e.preventDefault()\r\n\r\n    // let f = formValues.filter(f => f.rquantity)\r\n\r\n    let newFormValues = [...formValues];\r\n    newFormValues[i].isRecieved = true\r\n    setFormValues(prev => [...newFormValues])\r\n    try {\r\n        await axios.post(`${process.env.REACT_APP_API_URL}/invoice/return/`, {\r\n            formValues: recieveProduct,\r\n            invoice_id: returnInvoice.invoice\r\n        })\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n    // await Promise.all(f.map(async i => {\r\n    //     return await new Promise(async (resolve, reject) => {\r\n    //         try {\r\n    //             await axios.post(`${process.env.REACT_APP_API_URL}/invoice/return/`, {\r\n    //                 formValues: i,\r\n    //                 invoice_id: returnInvoice.invoice\r\n    //             })\r\n    //             return await resolve(0)\r\n    //         } catch (e) {\r\n    //             return reject(e);\r\n    //         }\r\n    //     })\r\n    // })).then(() => {\r\n    //     h.push('/returns/list')\r\n    // })\r\n}\r\n\r\nconst goBack = (h) => {\r\n    h.push('/returns/list')\r\n}\r\n\r\nconst displayReadOnlyForm = (element, index, returnInvoice) => {\r\n    return (\r\n        <CRow className=\"mb-4\" key={index}>\r\n            <div className=\"col-sm-2\">\r\n                <CFormInput\r\n                    name=\"code\"\r\n                    autoComplete=\"off\"\r\n                    type=\"text\"\r\n                    id=\"productCode\"\r\n                    readOnly={true}\r\n                    placeholder=\"Code(Ex: PR-12345)\"\r\n                />\r\n            </div>\r\n            {\r\n                element.error != '' ?\r\n                    <>\r\n                        <div className=\"col-sm-6 error-message\">\r\n                            Product code is invalid OR does not exist in this Invoice\r\n                        </div>\r\n                    </> :\r\n                    <>\r\n                        <div className=\"col-sm-2\">\r\n                            <CFormInput\r\n                                name=\"name\"\r\n                                autoComplete=\"off\"\r\n                                type=\"text\"\r\n                                id=\"name\"\r\n                                readOnly={true}\r\n                                value={element.name || ''}\r\n                                placeholder=\"Product Name\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-sm-1\">\r\n                            <CFormInput\r\n                                name=\"quantity\"\r\n                                readOnly={true}\r\n                                autoComplete=\"off\"\r\n                                type=\"number\"\r\n                                min=\"1\" max={element.quantity}\r\n                                placeholder={`${element.quantity || ''} Products`}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-sm-1 m-10imp\">\r\n                            <label>\r\n                                <input type=\"checkbox\"\r\n                                    readOnly={true}\r\n                                    name=\"isDamaged\" /> Is Damaged\r\n                            </label>\r\n                        </div>\r\n                        {\r\n                            element.isDamaged\r\n                                ?\r\n                                <>\r\n                                    <div className=\"col-sm-2\">\r\n                                        <select className=\"form-control\"\r\n                                            required\r\n                                            readOnly={true}\r\n                                        >\r\n                                            <option value=\"\">Select</option>\r\n                                            <option value=\"partial\">Partially Damaged</option>\r\n                                            <option value=\"full\">Full Damaged</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"col-sm-2\">\r\n                                        <CFormInput\r\n                                            required={element.isDamaged}\r\n                                            readOnly={true}\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                            placeholder={`Enter damaged cost`}\r\n                                        />\r\n                                    </div>\r\n                                </>\r\n                                : null\r\n                        }\r\n\r\n                        <div className=\"col-sm-1\">\r\n                            <input type=\"button\" value=\"Received\" className=\"btn btn-secondary\" />\r\n                        </div>\r\n                    </>\r\n            }\r\n        </CRow>\r\n    );\r\n}\r\n\r\nconst displayForm = (element, index, returnInvoice, formValues, setFormValues) => {\r\n    return (\r\n        <CRow className=\"mb-4\" key={index}>\r\n            <div className=\"col-sm-2\">\r\n                <CFormInput\r\n                    name=\"code\"\r\n                    autoComplete=\"off\"\r\n                    type=\"text\"\r\n                    id=\"productCode\"\r\n                    readonly={element.isRecieved ? true : false}\r\n                    onChange={(e) => changeCode(returnInvoice.invoice, index, e, formValues, setFormValues)}\r\n                    placeholder=\"Code(Ex: PR-12345)\"\r\n                />\r\n            </div>\r\n            {\r\n                element.error != '' ?\r\n                    <>\r\n                        <div className=\"col-sm-6 error-message\">\r\n                            Product code is invalid OR does not exist in this Invoice\r\n                        </div>\r\n                    </> :\r\n                    <>\r\n                        <div className=\"col-sm-2\">\r\n                            <CFormInput\r\n                                name=\"name\"\r\n                                autoComplete=\"off\"\r\n                                type=\"text\"\r\n                                id=\"name\"\r\n                                readOnly={true}\r\n                                value={element.name || ''}\r\n                                placeholder=\"Product Name\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-sm-1\">\r\n                            <CFormInput\r\n                                name=\"quantity\"\r\n\r\n                                required={element.name !== ''}\r\n                                onChange={e => updateRvalue(index, e, formValues, setFormValues)}\r\n                                autoComplete=\"off\"\r\n                                type=\"number\"\r\n                                min=\"1\" max={element.quantity}\r\n                                placeholder={`${element.quantity || ''} Products`}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-sm-1 m-10imp\">\r\n                            <label>\r\n                                <input type=\"checkbox\"\r\n\r\n                                    onChange={e => isDamagedFun(index, e, formValues, setFormValues)}\r\n                                    name=\"isDamaged\" /> Is Damaged\r\n                            </label>\r\n                        </div>\r\n                        {\r\n                            element.isDamaged\r\n                                ?\r\n                                <>\r\n                                    <div className=\"col-sm-2\">\r\n                                        <select className=\"form-control\"\r\n                                            required\r\n\r\n                                            onChange={e => updateDamageType(index, e, formValues, setFormValues)}\r\n                                        >\r\n                                            <option value=\"\">Select</option>\r\n                                            <option value=\"partial\">Partially Damaged</option>\r\n                                            <option value=\"full\">Full Damaged</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"col-sm-2\">\r\n                                        <CFormInput\r\n                                            required={element.isDamaged}\r\n                                            onChange={e => updateDamageCost(index, e, formValues, setFormValues)}\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                            placeholder={`Enter damaged cost`}\r\n                                        />\r\n                                    </div>\r\n                                </>\r\n                                : null\r\n                        }\r\n\r\n                        <div className=\"col-sm-1\">\r\n                            {\r\n                                element.isRecieved ?\r\n                                    <input type=\"button\" value=\"Received\" className=\"btn btn-secondary\" />\r\n                                    :\r\n                                    <input type=\"button\"\r\n                                        onClick={e => receiveProducts(e, index, formValues, element, returnInvoice, setFormValues)}\r\n                                        className=\"btn btn-primary\" value=\"Recieve\" />\r\n                            }\r\n                        </div>\r\n                    </>\r\n            }\r\n        </CRow>\r\n    )\r\n}\r\n\r\nexport const loadDataTable = (formValues, setFormValues, returnInvoice) => {\r\n    const history = useHistory()\r\n    return (\r\n        <>\r\n            <CRow>\r\n                <CCol xs={12}>\r\n                    <form method=\"post\"\r\n                        onSubmit={e => goBack(history)}\r\n                    >\r\n                        <CCard className=\"mb-4\">\r\n                            <CCardHeader>\r\n                                <strong>Receive Invoice Items for {returnInvoice.invoice}</strong>\r\n                            </CCardHeader>\r\n                            <CCardBody>\r\n                                {\r\n                                    formValues.map((element, index) => (\r\n                                        element.isRecieved ?\r\n                                            displayReadOnlyForm(element, index, returnInvoice)\r\n                                            :\r\n                                            displayForm(element, index, returnInvoice, formValues, setFormValues)\r\n                                    ))\r\n                                }\r\n                            </CCardBody>\r\n                            <CCardFooter>\r\n                                <CRow>\r\n                                    <div className=\"col-sm-6\"></div>\r\n                                    <div className=\"col-sm-6 alignright\">\r\n                                        <input type=\"submit\" className=\"btn btn-secondary\" value=\"Go Back to List\" />\r\n\r\n                                    </div>\r\n                                </CRow>\r\n                            </CCardFooter>\r\n                        </CCard>\r\n                    </form>\r\n                </CCol>\r\n            </CRow>\r\n        </>\r\n    )\r\n}\r\n\r\nexport const loadOptions = (invoices, displaySelectedInvoice) => {\r\n    return (\r\n        <div>\r\n            <CRow>\r\n                <CCol xs={12}>\r\n                    <CCard className=\"mb-2\">\r\n                        <CCardHeader>\r\n                            <CRow className=\"p-2\">\r\n                                <div className=\"col-sm-2\">\r\n                                    <h6>Invoices found {invoices.length}</h6>\r\n                                </div>\r\n                                <div className=\"col-sm-6\">\r\n                                    <select className=\"form-control\"\r\n                                        onChange={displaySelectedInvoice}\r\n                                    >\r\n                                        <option value=\"0\">Select Return Invoice Number</option>\r\n                                        {invoices.map((i) => (\r\n                                            <option\r\n                                                key={i.invoice}\r\n                                                value={i.invoice}>\r\n                                                {i.to_name} - {i.invoice}\r\n                                            </option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n                            </CRow>\r\n                        </CCardHeader>\r\n                    </CCard>\r\n                </CCol>\r\n            </CRow>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const searchInvoices = (setSearchString, getInvoices) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={getInvoices}>\r\n                <CRow>\r\n                    <CCol xs={12}>\r\n                        <CCard className=\"mb-2\">\r\n                            <CCardHeader>\r\n                                <CRow className=\"p-2\">\r\n                                    <div className=\"col-sm-10\">\r\n                                        <h4>Receive Invoice form</h4>\r\n                                    </div>\r\n\r\n                                </CRow>\r\n                            </CCardHeader>\r\n                            <CCardBody>\r\n                                <CRow>\r\n\r\n                                    <div className=\"col-sm-6\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            onChange={(e) => {\r\n                                                setSearchString(e.target.value)\r\n                                            }}\r\n                                            className=\"form-control\"\r\n                                            placeholder=\"Search by Company Name/Invoice Number/Director/Hero\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-sm-5\">\r\n                                        <button type=\"submit\"\r\n                                            className=\"btn btn-primary\"\r\n                                        >\r\n                                            Get Invoices\r\n                                        </button>\r\n                                    </div>\r\n\r\n                                </CRow>\r\n                            </CCardBody>\r\n                        </CCard>\r\n                    </CCol>\r\n                </CRow></form>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState, useReducer } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nrequire('dotenv').config()\r\nimport axios from 'axios'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport { CCard, CCardBody, CCardHeader, CCol, CFormInput, CRow } from '@coreui/react'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport { searchInvoices, loadOptions, loadDataTable } from './searchItems'\r\n\r\nconst ReturnInvoice = props => {\r\n    const [searchString, setSearchString] = useState('')\r\n    const [ss, setSS] = useState(false)\r\n    const [invoices, setInvoices] = useState(() => [])\r\n    const [returnInvoice, setReturnInvoice] = useState([])\r\n    const [formValues, setFormValues] = useState(() => [{\r\n        code: '',\r\n        name: '',\r\n        error: '',\r\n        quantity: 0,\r\n        isDamaged: false\r\n    }])\r\n\r\n    const getInvoices = async (e) => {\r\n        e.stopPropagation();\r\n        let results = await axios.post(`${process.env.REACT_APP_API_URL}/invoice/search`, { ss: searchString })\r\n        setSS(true)\r\n        setInvoices(prev => [...results.data])\r\n    }\r\n\r\n    const displaySelectedInvoice = (e) => {\r\n        if (e.target.value !== 0) {\r\n            setReturnInvoice(prevState => invoices.filter(i => i.invoice === e.target.value)[0])\r\n        } else {\r\n            setReturnInvoice(prevState => [])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {searchInvoices(setSearchString, getInvoices)}\r\n            {\r\n                invoices.length ?\r\n                    <>\r\n                        {loadOptions(invoices, displaySelectedInvoice)}\r\n                        <hr />\r\n                        {\r\n                            returnInvoice && returnInvoice.invoice !== undefined ?\r\n                                loadDataTable(formValues, setFormValues, returnInvoice)\r\n                                :\r\n                                <>\r\n                                    <div className=\"message col-sm-6\">\r\n                                        Please select the Invoice to return items\r\n                                    </div>\r\n                                </>\r\n                        }\r\n                    </>\r\n                    :\r\n                    <>\r\n                        {ss ? <>\r\n                            <div className=\"message col-sm-6\">\r\n                                No invoices found. Please refine your search\r\n                            </div>\r\n                        </> : <></>}\r\n                    </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReturnInvoice;"],"sourceRoot":""}