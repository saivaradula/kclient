{"version":3,"sources":["components/common/loading.js","components/invoice/scanner.js"],"names":["Loader","props","style","margin","padding","textAlign","fontWeight","color","size","require","config","Scanner","history","useHistory","items","setItems","refItems","useState","companyName","setCompanyName","openScanner","setOpenScanner","qrScanData","setQrScanData","refScannedItem","stopStream","setStopStream","React","isLoading","setIsLoading","nowIsLoading","className","value","onChange","event","target","type","placeholder","onUpdate","err","result","width","height","console","log","text","setTimeout","axios","get","process","current","then","data","length","d","code","name","nickname","onClick","icon","cilFingerprint","map","i","params","ids","item","join","company","post","response","push","addScannedItems"],"mappings":"6KAAA,kCAmCeA,IAvBCC,GAER,qBAAKC,MAAO,CACRC,OAAQ,OACRC,QAAS,OACTC,UAAW,SACXC,WAAY,OAJhB,SAMI,cAAC,IAAD,CAAaC,MAAON,EAAMM,MAAOC,KAAM,S,iCCpBnD,6IAcAC,EAAQ,KAAUC,SAyKHC,UAvKC,KACZ,MAAMC,EAAUC,eACTC,EAAOC,EAAUC,GAAYC,IAAS,KACtCC,EAAaC,GAAkBF,IAAS,KACxCG,EAAaC,GAAkBJ,KAAS,IACxCK,EAAYC,EAAeC,GAAkBP,IAAS,KACtDQ,EAAYC,GAAiBC,IAAMV,UAAS,IAC5CW,EAAWC,EAAcC,GAAgBb,KAAS,GAwCzD,OACI,qCACI,cAAC,IAAD,CAAOc,UAAU,OAAjB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,IAGA,eAAC,IAAD,WACI,qBAAKA,UAAU,YAAf,SACI,uBAAOC,MAAOd,EACVe,SAAWC,GAAUf,EAAee,EAAMC,OAAOH,OACjDI,KAAK,OAAOL,UAAU,eAAeM,YAAY,mBAEzD,qBAAKN,UAAU,eAAf,SACI,cAAC,IAAD,CACIN,WAAYA,EACZa,SAAU,CAACC,EAAKC,WAOpBpB,IAAgBK,EACZ,mCACI,cAAC,IAAD,CACIgB,MAAO,IACPC,OAAQ,IACRjB,WAAYA,EACZa,SAAU,CAACC,EAAKC,KACZG,QAAQC,IAAI,QAASL,GACjBC,IACAjB,EAAciB,EAAOK,MACrBhB,GAAa,GACbH,GAAc,GACdoB,YAAW,KAlEnDC,IAAMC,IAAN,UAAaC,wCAAb,6BAA+DzB,EAAe0B,UAAWC,MAAMC,IAC3F,GAAIA,EAAKA,KAAKC,OAAQ,CAElB,IAAIC,EAAI,CAAC,CAAEC,MADXH,EAAOA,EAAKA,KAAK,IACKG,KAAMC,KAAMJ,EAAKI,KAAMC,SAAUL,EAAKK,WAC5D1C,EAAS,IAAIC,EAASkC,WAAYI,IAEtC/B,EAAc,IACdM,GAAa,QA6D0B,WAMnB,mCAAE,4BAAIP,cAML,KAAhBJ,EACG,mCACI,eAAC,IAAD,WACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,qBAAKa,UAAU,sBAAf,2BAGA,qBAAKA,UAAU,WAAf,SACI,cAAC,IAAD,CAASxB,MAAM,YAAY6B,KAAK,SAAhC,SACI,cAAC,IAAD,CAAOsB,QAAS,KAhGpDrC,GAAe,GACfK,GAAc,QACdG,GAAa,IA+F2B8B,KAAMC,IAAgB7B,UAAU,oBAQpD,eAAC,IAAD,WACKD,EAAaoB,QAAU,cAAC,IAAD,IAAa,6BAEhClC,EAASkC,QAAQG,OACd,mCACI,wBAAOtB,UAAU,QAAjB,UACI,gCACI,+BACI,sCACA,8CAGR,gCAEQf,EAASkC,QAAQW,KAAIC,GACjB,6BACI,6BAAKA,EAAEL,sBAQ/B,6BAGR,uBACA,cAAC,IAAD,UACI,sBAAK1B,UAAU,wBAAf,UACI,cAAC,IAAD,CAASxB,MAAM,UAAU6B,KAAK,SAC1BsB,QAAS,IAhHzB,MACpB,IACIK,EAAS,CACTC,IAFMhD,EAASkC,QAAQW,KAAKI,GAASA,EAAKV,OAAMW,KAAK,KAGrDC,QAASjD,GAEb6B,IAAMqB,KAAN,UAAcnB,wCAAd,sBAAiEc,GAAQZ,MAAK,SAAUkB,GACpF1B,QAAQC,IAAIyB,GACZzD,EAAQ0D,KAAK,kBAwGkCC,GADnB,iBADJ,WAMI,cAAC,IAAD,CAAShE,MAAM,YACXmD,QAAS,KA3H7CnC,EAAc,IACdM,GAAa,GACbR,GAAe,QACfF,EAAe,KAyHqBiB,KAAK,SAFT,iCASlB,6BAGV","file":"static/js/36.4475eb69.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport BeatLoader from \"react-spinners/BeatLoader\";\r\nimport ClockLoader from \"react-spinners/ClockLoader\"\r\nimport ScaleLoader from \"react-spinners/ScaleLoader\"\r\n\r\nconst override: CSSProperties = {\r\n    display: \"block\",\r\n    margin: \"0 auto\",\r\n    borderColor: \"red\",\r\n};\r\n\r\nconst Loader = (props) => {\r\n    return (\r\n        <div style={{\r\n            margin: 'auto',\r\n            padding: '10px',\r\n            textAlign: 'center',\r\n            fontWeight: '650'\r\n        }}>\r\n            <ScaleLoader color={props.color} size={160} />\r\n        </div>\r\n\r\n        // <ClockLoader color={props.color} size={45} aria-label=\"Loading...\" data-testid=\"loader\" />\r\n        // <BeatLoader\r\n        //     color={props.color}\r\n        //     loading={true}\r\n        //     cssOverride={override}\r\n        //     size={props.size}\r\n        //     aria-label=\"Loading...\"\r\n        //     data-testid=\"loader\"\r\n        // />\r\n    )\r\n}\r\n\r\nexport default Loader;","import React, { useEffect, useReducer } from 'react'\r\nimport useState from 'react-usestateref'\r\nimport { useHistory, Link } from 'react-router-dom'\r\nimport { CCard, CCardBody, CCardHeader, CCol, CRow, CButton } from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\n\r\nimport { cilPlus, cilCheck, cilFingerprint, cilDelete } from '@coreui/icons'\r\nimport Loader from '../common/loading'\r\n// import QrScan from 'react-qr-reader'\r\n\r\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\r\n\r\nimport moment from 'moment'\r\nimport axios from 'axios'\r\nrequire('dotenv').config()\r\n\r\nconst Scanner = () => {\r\n    const history = useHistory()\r\n    const [items, setItems, refItems] = useState([])\r\n    const [companyName, setCompanyName] = useState('');\r\n    const [openScanner, setOpenScanner] = useState(false);\r\n    const [qrScanData, setQrScanData, refScannedItem] = useState('');\r\n    const [stopStream, setStopStream] = React.useState(false);\r\n    const [isLoading, setIsLoading, nowIsLoading] = useState(false);\r\n\r\n    const startScanner = () => {\r\n        setOpenScanner(true)\r\n        setStopStream(false)\r\n        setIsLoading(false)\r\n    }\r\n\r\n    const getProductDetails = () => {\r\n        axios.get(`${process.env.REACT_APP_API_URL}/products/details/${refScannedItem.current}`).then((data) => {\r\n            if (data.data.length) {\r\n                data = data.data[0];\r\n                let d = [{ code: data.code, name: data.name, nickname: data.nickname }]\r\n                setItems([...refItems.current, ...d])\r\n            }\r\n            setQrScanData('')\r\n            setIsLoading(false)\r\n        });\r\n    }\r\n\r\n    const resetScanner = () => {\r\n        setQrScanData('')\r\n        setIsLoading(false)\r\n        setOpenScanner(false)\r\n        setCompanyName('')\r\n    }\r\n\r\n    const addScannedItems = () => {\r\n        let ids = refItems.current.map((item) => item.code).join(',')\r\n        let params = {\r\n            ids: ids,\r\n            company: companyName\r\n        }\r\n        axios.post(`${process.env.REACT_APP_API_URL}/products/addscans`, params).then(function (response) {\r\n            console.log(response);\r\n            history.push('/dashboard')\r\n\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CCard className=\"mb-4\">\r\n                <CCardBody>\r\n                    <CRow>\r\n\r\n                    </CRow>\r\n                    <CRow>\r\n                        <div className=\"col-sm-12\">\r\n                            <input value={companyName}\r\n                                onChange={(event) => setCompanyName(event.target.value)}\r\n                                type=\"text\" className=\"form-control\" placeholder=\"Company Name\" />\r\n                        </div>\r\n                        <div className=\"donotdisplay\">\r\n                            <BarcodeScannerComponent\r\n                                stopStream={stopStream}\r\n                                onUpdate={(err, result) => {\r\n\r\n                                }}\r\n                            />\r\n                        </div>\r\n\r\n                        {\r\n                            openScanner && !stopStream ?\r\n                                <>\r\n                                    <BarcodeScannerComponent\r\n                                        width={250}\r\n                                        height={250}\r\n                                        stopStream={stopStream}\r\n                                        onUpdate={(err, result) => {\r\n                                            console.log('error', err)\r\n                                            if (result) {\r\n                                                setQrScanData(result.text);\r\n                                                setIsLoading(true)\r\n                                                setStopStream(true);\r\n                                                setTimeout(() => {\r\n                                                    getProductDetails()\r\n                                                }, 2000)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </>\r\n                                :\r\n                                <><p>{qrScanData}</p></>\r\n                        }\r\n                    </CRow>\r\n                </CCardBody>\r\n            </CCard>\r\n            {\r\n                (companyName !== '') ?\r\n                    <>\r\n                        <CCard>\r\n                            <CCardHeader>\r\n                                <CRow>\r\n                                    <div className=\"col-sm-2 float-left\">\r\n                                        Items Scanned\r\n                                    </div>\r\n                                    <div className=\"col-sm-2\">\r\n                                        <CButton color=\"secondary\" type=\"button\">\r\n                                            <CIcon onClick={() => startScanner()}\r\n                                                icon={cilFingerprint} className=\"cricon\" />\r\n\r\n\r\n                                        </CButton>\r\n                                    </div>\r\n                                </CRow>\r\n\r\n                            </CCardHeader>\r\n                            <CCardBody>\r\n                                {nowIsLoading.current ? <Loader /> : <></>}\r\n                                {\r\n                                    (refItems.current.length) ?\r\n                                        <>\r\n                                            <table className=\"table\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th>Name</th>\r\n                                                        <th>Actions</th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {\r\n                                                        refItems.current.map(i => (\r\n                                                            <tr>\r\n                                                                <td>{i.nickname}</td>\r\n                                                            </tr>\r\n                                                        ))\r\n                                                    }\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </>\r\n                                        :\r\n                                        <></>\r\n                                }\r\n\r\n                                <hr />\r\n                                <CRow>\r\n                                    <div className=\"col-sm-12 float-right\">\r\n                                        <CButton color=\"primary\" type=\"button\"\r\n                                            onClick={() => addScannedItems()}>\r\n                                            Add\r\n                                        </CButton>\r\n                                        &nbsp;&nbsp;\r\n                                        <CButton color=\"secondary\"\r\n                                            onClick={() => resetScanner()}\r\n                                            type=\"button\">\r\n                                            Cancel\r\n                                        </CButton>\r\n                                    </div>\r\n                                </CRow>\r\n                            </CCardBody>\r\n                        </CCard></>\r\n                    : <></>\r\n            }\r\n\r\n            <div>&nbsp;</div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Scanner"],"sourceRoot":""}