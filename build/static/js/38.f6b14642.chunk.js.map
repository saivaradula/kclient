{"version":3,"sources":["components/product/QRCode.js","components/product/preview.js"],"names":["QrCode","props","options","ecLevel","enableCORS","size","quietZone","bgColor","fgColor","logoImage","logoWidth","logoHeight","logoOpacity","qrStyle","value","url","PrintPreview","isPCodePicked","setIsCodePicked","useState","logo","setLogo","po","setPO","i","setI","defaultOptions","useEffect","Object","entries","JSON","parse","localStorage","getItem","map","key","styles","border","className","style","textAlign","marginRight","type","onClick","window","print","xs","n","parseInt","num","d","doPrint","qr","Array","name","code","price","bar","width","height","textMargin","fontSize"],"mappings":"6KAAA,2DAGe,SAASA,EAAOC,GAC7B,MAcMC,EAAU,CAbdC,QAAS,IACTC,YAAY,EACZC,KAAM,IACNC,UAAW,GACXC,QAAS,UACTC,QAAS,UACTC,UAAW,GACXC,UAAW,GACXC,WAAY,GACZC,YAAa,EACbC,QAAS,aAG6BZ,EAAMC,SAE9C,OAAO,cAAC,SAAD,CAAQY,MAAOb,EAAMc,OAASb,M,iCCpBvC,6DAuHec,UAhHOf,IACpB,MAAOgB,EAAeC,GAAmBC,oBAAS,IAC3CC,EAAMC,GAAWF,oBAAS,IAC1BG,EAAIC,GAASJ,mBAAS,IAC7B,IAAKK,EAAGC,GAAQN,mBAAS,GACzB,MAAMO,EAAiB,CACrBrB,KAAM,IAGRsB,qBAAU,KACHV,IACHC,GAAgB,GAChBU,OAAOC,QAAQC,KAAKC,MAAMC,aAAaC,QAAQ,sBAAsBC,KAAI,IAAmB,IAAjBC,EAAKrB,GAAW,EACzFQ,EAAGa,GAAOrB,SAKhB,MAIMsB,EAAS,CACbC,OAAQ,aAGV,OACE,mCACGpB,EACC,qCACE,qBAAKqB,UAAU,YAAYC,MAAO,CAAEC,UAAW,QAASC,YAAa,QAArE,SACE,wBAAQC,KAAK,SAASJ,UAAU,kBAAkBK,QAbtC,KACpBC,OAAOC,SAYC,qBAKF,cAAC,IAAD,UACE,cAAC,IAAD,CAAMC,GAAI,GAAV,SACE,cAAC,IAAD,CAAOR,UAAU,OAAjB,SACE,cAAC,IAAD,UACGV,OAAOC,QAAQC,KAAKC,MAAMC,aAAaC,QAAQ,WAAWC,KAAI,IAAmB,IAAjBC,EAAKrB,GAAW,EAC3EiC,EAAIC,SAASlC,EAAMmC,KACnBC,EAAIpC,EAAMqC,QACZ,qCACG7B,EAAG8B,GACF,cAAC,IAAD,CAAgBd,UAAU,OAA1B,SACG,IAAIe,MAAMN,IAAIb,KAAKV,GAEhB,sBAAKc,UAAU,uBAAf,UACE,qBAAKA,UAAU,UAAf,SAA0BhB,EAAGgC,KAAOxC,EAAMwC,KAAO,+BACjD,8BACE,cAAC,IAAD,CAAQjD,KAAK,KAAKkC,MAAOH,EAAQrB,IAAKoB,EAAKjC,QAASwB,MAEtD,sBAAKY,UAAU,UAAf,UACGhB,EAAGiC,KAAOpB,EAAM,IAAM,6BACtBb,EAAGkC,MAAQ1C,EAAM0C,MAAQ,sCAVzBrB,GAiBX,6BAGDb,EAAGmC,IACF,cAAC,IAAD,CAAgBnB,UAAU,OAA1B,SACG,IAAIe,MAAMN,IAAIb,KAAKV,GAEhB,sBAAKc,UAAU,uBAAf,UACE,qBAAKA,UAAU,UAAf,SAA0BhB,EAAGgC,KAAOxC,EAAMwC,KAAO,+BACjD,8BACE,cAAC,IAAD,CACExC,MAAOqB,EACPuB,MAAM,IACNC,OAAO,KACPC,WAAW,IACXC,SAAS,eAXV1B,GAuBX,6BAEF,uBACM,GAALX,EAAS,qBAAKc,UAAU,cAAqB,QAGhD,6BAGF,OADAd,GAAQ,EACD0B,gBAQnB","file":"static/js/38.f6b14642.chunk.js","sourcesContent":["import React from 'react'\r\nimport { QRCode } from 'react-qrcode-logo'\r\n\r\nexport default function QrCode(props) {\r\n  const defaultOptions = {\r\n    ecLevel: 'M',\r\n    enableCORS: false,\r\n    size: 150,\r\n    quietZone: 10,\r\n    bgColor: '#FFFFFF',\r\n    fgColor: '#000000',\r\n    logoImage: '',\r\n    logoWidth: 30,\r\n    logoHeight: 30,\r\n    logoOpacity: 1,\r\n    qrStyle: 'squares',\r\n  }\r\n\r\n  const options = { ...defaultOptions, ...props.options }\r\n\r\n  return <QRCode value={props.url} {...options} />\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\n\r\nimport QrCode from './QRCode'\r\nimport Barcode from 'react-barcode'\r\n\r\nimport { CButton, CCard, CCardBody, CCardHeader, CCol, CRow } from '@coreui/react'\r\n\r\nconst PrintPreview = (props) => {\r\n  const [isPCodePicked, setIsCodePicked] = useState(false)\r\n  const [logo, setLogo] = useState(false)\r\n  const [po, setPO] = useState({})\r\n  let [i, setI] = useState(1)\r\n  const defaultOptions = {\r\n    size: 50,\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!isPCodePicked) {\r\n      setIsCodePicked(true)\r\n      Object.entries(JSON.parse(localStorage.getItem('printing_options'))).map(([key, value]) => {\r\n        po[key] = value\r\n      })\r\n    }\r\n  })\r\n\r\n  const printThisPage = () => {\r\n    window.print()\r\n  }\r\n\r\n  const styles = {\r\n    border: '1px solid',\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isPCodePicked ? (\r\n        <>\r\n          <div className=\"mt-4 mb-4\" style={{ textAlign: 'right', marginRight: '30px' }}>\r\n            <button type=\"button\" className=\"primary noprint\" onClick={printThisPage}>\r\n              Print\r\n            </button>\r\n          </div>\r\n\r\n          <CRow>\r\n            <CCol xs={12}>\r\n              <CCard className=\"mb-4\">\r\n                <CCardBody>\r\n                  {Object.entries(JSON.parse(localStorage.getItem('print'))).map(([key, value]) => {\r\n                    let n = parseInt(value.num)\r\n                    let d = value.doPrint ? (\r\n                      <>\r\n                        {po.qr ? (\r\n                          <CRow key={key} className=\"mb-4\">\r\n                            {[...Array(n)].map((i) => {\r\n                              return (\r\n                                <div className=\"col-sm-1 text-center\">\r\n                                  <div className=\"caption\">{po.name ? value.name : <></>}</div>\r\n                                  <div>\r\n                                    <QrCode size=\"20\" style={styles} url={key} options={defaultOptions} />\r\n                                  </div>\r\n                                  <div className=\"caption\">\r\n                                    {po.code ? key + '-' : <></>}\r\n                                    {po.price ? value.price : <></>}\r\n                                  </div>\r\n                                </div>\r\n                              )\r\n                            })}\r\n                          </CRow>\r\n                        ) : (\r\n                          <></>\r\n                        )}\r\n\r\n                        {po.bar ? (\r\n                          <CRow key={key} className=\"mb-4\">\r\n                            {[...Array(n)].map((i) => {\r\n                              return (\r\n                                <div className=\"col-sm-2 text-center\">\r\n                                  <div className=\"caption\">{po.name ? value.name : <></>}</div>\r\n                                  <div>\r\n                                    <Barcode\r\n                                      value={key}\r\n                                      width=\"2\"\r\n                                      height=\"20\"\r\n                                      textMargin=\"2\"\r\n                                      fontSize=\"10\"\r\n                                    />\r\n                                  </div>\r\n                                  {/* <div className=\"caption\">\r\n                                    {po.code ? key + '-' : <></>}\r\n                                    {po.price ? value.price : <></>}\r\n                                  </div> */}\r\n                                </div>\r\n                              )\r\n                            })}\r\n                          </CRow>\r\n                        ) : (\r\n                          <></>\r\n                        )}\r\n                        <hr />\r\n                        {i == 4 ? <div className=\"pagebreak\"></div> : null}\r\n                      </>\r\n                    ) : (\r\n                      <></>\r\n                    )\r\n                    i = i + 1\r\n                    return d\r\n                  })}\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n          </CRow>\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PrintPreview\r\n"],"sourceRoot":""}